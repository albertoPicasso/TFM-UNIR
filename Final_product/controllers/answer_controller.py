from pathlib import Path
from services.answer_services.rewrite_classify_service import RewriteClassifyService
from services.answer_services.answer_service import AnswerService
import logging
class AnswerController():

    def __init__(self,
                 database_path: str,
                 embedding_model_name:str,
                 classifier_model_name:str,
                 classifier_model_type:str,
                 classifier_api_key:str,
                 classifier_temperature:float,
                 classifier_max_tokens:int,
                 classifier_top_k:float,

                 answer_model_name:str,
                 answer_model_type:str,
                 answer_api_key:str,
                 answer_temperature:float,
                 answer_max_tokens:int,
                 answer_top_k:float,

                 content_path:str,
                 database_type:str = "faiss"
                 ):

            #Check database path
            path = Path(database_path)
            if not path.exists():
                raise ValueError(f"Document path does not exist: {database_path}")

            if not self._structure_is_valid(database_path):
                raise ValueError(f"Estructura inválida en: {database_path}")

            self.DATABASE_PATH = database_path

            #Check content path
            path = Path(content_path)
            if not path.exists():
                raise ValueError(f"Document path does not exist: {content_path}")

            if not self._structure_is_valid(content_path):
                raise ValueError(f"Estructura inválida en: {content_path}")

            self.CONTEN_PATH = content_path


            self.rw = RewriteClassifyService(   classifier_model_type = classifier_model_type,
                                                classifier_model_name = classifier_model_name,
                                                classifier_api_key = classifier_api_key,
                                                classifier_temperature = classifier_temperature,
                                                classifier_top_k = classifier_top_k,
                                                classifier_max_tokens = classifier_max_tokens,
                                                )

            self.answer_service = AnswerService(
                                                answer_model_type = answer_model_type,
                                                answer_model_name = answer_model_name,
                                                answer_api_key = answer_api_key,
                                                answer_temperature = answer_temperature,
                                                answer_top_k = answer_top_k,
                                                answer_max_tokens = answer_max_tokens,
                                                database_type = database_type,
                                                embeddings_model_name= embedding_model_name,
                                                database_path = database_path,
                                                content_path= content_path
                                                )

            self.logger = logging.getLogger(__name__)




    def _structure_is_valid(self, content_path: str) -> bool:
        base = Path(content_path)

        required_dirs = ["teoria", "info", "practica"]
        practica_subdirs = [] # ["examenes", "ejercicios"]

        for d in required_dirs:
            if not (base / d).is_dir():
                return False

        for sub in practica_subdirs:
            if not (base / "practica" / sub).is_dir():
                return False

        return True

    def launch (self, history: str):
        """
        Processes a user input string and generates an appropriate response
        based on the classified category of the question.

        Parameters:
            history (str): The user input or conversation history containing the question.

        Returns:
            str: The response generated by the appropriate answer service.

        Raises:
            ValueError: If the question cannot be classified into a known category.

        Categories:
            - "teoria": Sends the question to the theory database for a regular answer.
            - "informacion": Sends the question to the info database for a regular answer.
            - "practica": Sends the question to the practical answer service using a specific summary tree.
            - "irrelevante": Returns a default message indicating the question cannot be answered.
        """

        category, question = self.rw.classify_rewrite(history=history)

        match(category):
            case "teoria":
                response = self.answer_service.regular_answer(database_name="teoria", question= question)
                return response

            case "informacion":
                response = self.answer_service.regular_answer(database_name="info", question= question)
                return response

            case "practica":
                directory = Path("practica")
                name = Path("summary_tree.json")
                database_name = directory / name
                response = self.answer_service.practical_answer(database_name=database_name, folder_name="practica", question=question)
                return response

            case "irrelevante":
                return "Lo siento, no estoy autorizado a contestar esas preguntas. En breves se pondrá en contacto con usted un administrador."

            case _:
                raise ValueError ("Cannot classify the question")
